name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
            .pre-commit-config.yaml
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install pre-commit
        run: pip install --upgrade pip pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure --color always

  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Ruff check
        run: ruff check src tests
      - name: Ruff format (check only)
        run: ruff format --check

  test:
    name: Tests (py${{ matrix.python-version }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]
    env:
      # Ensure stubs are available across ALL steps in this job
      PYTHONPATH: stubs:.
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
      - name: Install deps (test + coverage)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # Install your package with test extras, plus coverage tools
          pip install -e .[test] coverage[toml] pytest-cov
          # If you rely on demo/cli extras, install dev extras too
          pip install -e .[dev]
          # Optional plain requirements file
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Prepare import stubs
        run: |
          set -euo pipefail
          mkdir -p stubs/pdfminer
          cat <<'PY' > stubs/fastapi.py
class HTTPException(Exception):
    def __init__(self, status_code: int, detail: str):
        self.status_code = status_code
        self.detail = detail
class APIRouter:
    def __init__(self): ...
    def get(self, *a, **k):
        def deco(fn): return fn
        return deco
    def post(self, *a, **k):
        def deco(fn): return fn
        return deco
def Query(*a, **k): return None
PY
          cat <<'PY' > stubs/pydantic.py
class BaseModel: ...
def Field(default=None, **kwargs): return default
PY
          cat <<'PY' > stubs/pdfminer/high_level.py
def extract_text(path): return ""
PY
          touch stubs/pdfminer/__init__.py
      - name: Smoke tests (CLI & scripts)
        run: |
          set -euo pipefail
          pytest -q
          # CLI/demos that should not require network
          python -m src.cli --help
          python scripts/generate_sample_corpus.py
          python examples/distinguish_glj/demo.py
          python -m src.pdf_ingest --help
      - name: Unit tests with coverage
        run: |
          set -euo pipefail
          pytest --maxfail=1 --cov=src --cov-report=xml
      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}.xml
          path: coverage.xml

  eval-goldset:
    name: Evaluate gold set (one shard)
    needs: [test]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || startsWith(github.head_ref, 'codex/') || startsWith(github.ref, 'refs/heads/main') }}
    env:
      PYTHONPATH: stubs:.
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test,dev]
      - name: Prepare import stubs
        run: |
          mkdir -p stubs/pdfminer
          printf "def extract_text(path):\n    return ''\n" > stubs/pdfminer/high_level.py
          touch stubs/pdfminer/__init__.py
      - name: Evaluate gold set
        run: sensiblaw eval goldset
